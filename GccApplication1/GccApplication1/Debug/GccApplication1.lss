
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800100  00000aec  00000b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800284  00800284  00000d04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016fb  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d5  00000000  00000000  000024f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081d  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000035ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b0  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ed  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000045c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 38       	cpi	r26, 0x8C	; 140
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  9e:	0c 94 74 05 	jmp	0xae8	; 0xae8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	43 98       	cbi	0x08, 3	; 8
  aa:	44 98       	cbi	0x08, 4	; 8
  ac:	45 9a       	sbi	0x08, 5	; 8
  ae:	00 00       	nop
  b0:	45 98       	cbi	0x08, 5	; 8
  b2:	8d ee       	ldi	r24, 0xED	; 237
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Command+0x10>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_Command+0x16>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <LCD_Char>:
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	43 9a       	sbi	0x08, 3	; 8
  c4:	44 98       	cbi	0x08, 4	; 8
  c6:	45 9a       	sbi	0x08, 5	; 8
  c8:	00 00       	nop
  ca:	45 98       	cbi	0x08, 5	; 8
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Char+0x10>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Char+0x16>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_Init>:
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	88 63       	ori	r24, 0x38	; 56
  de:	87 b9       	out	0x07, r24	; 7
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
  e4:	87 e8       	ldi	r24, 0x87	; 135
  e6:	93 e1       	ldi	r25, 0x13	; 19
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Init+0xe>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Init+0x14>
  ee:	00 00       	nop
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
 10e:	08 95       	ret

00000110 <LCD_String>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	31 f0       	breq	.+12     	; 0x128 <LCD_String+0x18>
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Char>
 122:	89 91       	ld	r24, Y+
 124:	81 11       	cpse	r24, r1
 126:	fb cf       	rjmp	.-10     	; 0x11e <LCD_String+0xe>
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <LCD_String_Move>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	8f 85       	ldd	r24, Y+15	; 0x0f
 136:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <c>
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 140:	fe 01       	movw	r30, r28
 142:	3f 96       	adiw	r30, 0x0f	; 15
 144:	9e 01       	movw	r18, r28
 146:	82 91       	ld	r24, -Z
 148:	81 83       	std	Z+1, r24	; 0x01
 14a:	e2 17       	cp	r30, r18
 14c:	f3 07       	cpc	r31, r19
 14e:	d9 f7       	brne	.-10     	; 0x146 <LCD_String_Move+0x18>
 150:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <c>
 154:	88 83       	st	Y, r24
 156:	18 8a       	std	Y+16, r1	; 0x10
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
 16a:	08 95       	ret

0000016c <Request>:
}

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
 16c:	56 9a       	sbi	0x0a, 6	; 10
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
 16e:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	83 e9       	ldi	r24, 0x93	; 147
 172:	91 e1       	ldi	r25, 0x11	; 17
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Request+0x8>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Request+0xe>
 17a:	00 00       	nop
	_delay_ms(18);			/* wait for 18ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
 17c:	5e 9a       	sbi	0x0b, 6	; 11
 17e:	08 95       	ret

00000180 <Response>:
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 180:	56 98       	cbi	0x0a, 6	; 10
	while(PIND & (1<<DHT11_PIN));
 182:	4e 99       	sbic	0x09, 6	; 9
 184:	fe cf       	rjmp	.-4      	; 0x182 <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
 186:	4e 9b       	sbis	0x09, 6	; 9
 188:	fe cf       	rjmp	.-4      	; 0x186 <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
 18a:	4e 99       	sbic	0x09, 6	; 9
 18c:	fe cf       	rjmp	.-4      	; 0x18a <Response+0xa>
}
 18e:	08 95       	ret

00000190 <Receive_data>:

uint8_t Receive_data()			/* receive data */
{
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int q=0; q<8; q++)
	{
		
		while((PIND & (1<<DHT11_PIN)) == 0);  /* wait for logic 0 */
 194:	4e 9b       	sbis	0x09, 6	; 9
 196:	fe cf       	rjmp	.-4      	; 0x194 <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2a e0       	ldi	r18, 0x0A	; 10
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <Receive_data+0xa>
		{
		}
		_delay_us(30);
		//PORTB = 0x02;
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
 19e:	4e 9b       	sbis	0x09, 6	; 9
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <Receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 1a2:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <c>
 1a6:	22 0f       	add	r18, r18
 1a8:	21 60       	ori	r18, 0x01	; 1
 1aa:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <c>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <Receive_data+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 1b0:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <c>
 1b4:	22 0f       	add	r18, r18
 1b6:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <c>
		//PORTB = 0x04;
		while(PIND & (1<<DHT11_PIN));
 1ba:	4e 99       	sbic	0x09, 6	; 9
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <Receive_data+0x2a>
 1be:	01 97       	sbiw	r24, 0x01	; 1
}

uint8_t Receive_data()			/* receive data */
{
	
	for (int q=0; q<8; q++)
 1c0:	49 f7       	brne	.-46     	; 0x194 <Receive_data+0x4>
		c = (c<<1);
		//PORTB = 0x04;
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 1c2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <c>
 1c6:	08 95       	ret

000001c8 <ADC_Init>:

void ADC_Init()
{
	ADMUX = (1<<REFS0);     //select AVCC as reference
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1);  //enable and prescale = 128 (16MHz/128 = 125kHz)
 1ce:	83 e8       	ldi	r24, 0x83	; 131
 1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1d4:	08 95       	ret

000001d6 <ADC_Read>:
//int ADC_Read(char channel)
int ADC_Read(int ADCchannel)
{
	//channel &= 0b0000111;
	//ADMUX |= (1<<MUX0);
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);		//select input and ref
 1d6:	ec e7       	ldi	r30, 0x7C	; 124
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	90 7f       	andi	r25, 0xF0	; 240
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	89 2b       	or	r24, r25
 1e2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                 //start the conversion
 1e4:	ea e7       	ldi	r30, 0x7A	; 122
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));          //wait for end of conversion
 1ee:	80 81       	ld	r24, Z
 1f0:	86 fd       	sbrc	r24, 6
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <ADC_Read+0x18>
	return ADCW;
 1f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 1fc:	08 95       	ret

000001fe <__vector_1>:

ISR (INT0_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
	if(display==0){
 20c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
 210:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <__data_end+0x1>
 214:	89 2b       	or	r24, r25
 216:	39 f4       	brne	.+14     	; 0x226 <__vector_1+0x28>
		display=1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <__data_end+0x1>
 220:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__data_end>
 224:	04 c0       	rjmp	.+8      	; 0x22e <__vector_1+0x30>
		}else{
		display=0;
 226:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <__data_end+0x1>
 22a:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
	}
}
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <main>:

int main(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <main+0x6>
 242:	00 d0       	rcall	.+0      	; 0x244 <main+0x8>
 244:	1f 92       	push	r1
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	float soil_sensor;
	char data[5];
	int emo=0;
	LCD_Init();                 /* initialize 16x2 LCD*/
 24a:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Init>
	LCD_Clear();
 24e:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
	ADC_Init();                 /* initialize ADC*/
 252:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ADC_Init>

	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
 256:	52 98       	cbi	0x0a, 2	; 10
	// PD2 (PCINT0 pin) is now an input

	PORTD |= (1 << PORTD2);    // turn On the Pull-up
 258:	5a 9a       	sbi	0x0b, 2	; 11
	// PD2 is now an input with pull-up enabled



	EICRA |= (1 << ISC01);    // set INT0 to trigger on ANY logic change
 25a:	e9 e6       	ldi	r30, 0x69	; 105
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	82 60       	ori	r24, 0x02	; 2
 262:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
 264:	e8 9a       	sbi	0x1d, 0	; 29
	LCD_Clear();
 266:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
	LCD_String("   Welcome!!!   ");	/* write string on 1st line of LCD*/
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f e7       	ldi	r18, 0x7F	; 127
 274:	8a e1       	ldi	r24, 0x1A	; 26
 276:	96 e0       	ldi	r25, 0x06	; 6
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x3c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x46>
 282:	00 00       	nop
	_delay_ms(2000);
	sei();
 284:	78 94       	sei

int main(void)
{
	float soil_sensor;
	char data[5];
	int emo=0;
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0
			if(emo==1){
				LCD_String_xy(1,0,"     ( ^_^ )    ");
				emo=0;
				}else{
				LCD_String_xy(1,0,"     ( ^.^ )    ");
				emo=1;
 28a:	aa 24       	eor	r10, r10
 28c:	a3 94       	inc	r10
 28e:	b1 2c       	mov	r11, r1
	LCD_String("   Welcome!!!   ");	/* write string on 1st line of LCD*/
	_delay_ms(2000);
	sei();
	while(1)
	{
		soil_sensor = ADC_Read(0);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ADC_Read>
		soil_sensor = 100-(soil_sensor*100)/1023;
 298:	bc 01       	movw	r22, r24
 29a:	99 0f       	add	r25, r25
 29c:	88 0b       	sbc	r24, r24
 29e:	99 0b       	sbc	r25, r25
 2a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__floatsisf>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	48 ec       	ldi	r20, 0xC8	; 200
 2aa:	52 e4       	ldi	r21, 0x42	; 66
 2ac:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__mulsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 ec       	ldi	r19, 0xC0	; 192
 2b4:	4f e7       	ldi	r20, 0x7F	; 127
 2b6:	54 e4       	ldi	r21, 0x44	; 68
 2b8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__divsf3>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	88 ec       	ldi	r24, 0xC8	; 200
 2c6:	92 e4       	ldi	r25, 0x42	; 66
 2c8:	0e 94 01 03 	call	0x602	; 0x602 <__subsf3>
 2cc:	6b 01       	movw	r12, r22
 2ce:	7c 01       	movw	r14, r24
		//light_sensor = ADC_Read(1);
		Request();		/* send start pulse */
 2d0:	0e 94 b6 00 	call	0x16c	; 0x16c <Request>

		Response();		/* receive response */
 2d4:	0e 94 c0 00 	call	0x180	; 0x180 <Response>
		
	    I_RH=Receive_data();	/* store first eight bit in I_RH */
 2d8:	0e 94 c8 00 	call	0x190	; 0x190 <Receive_data>
 2dc:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 2e0:	0e 94 c8 00 	call	0x190	; 0x190 <Receive_data>
 2e4:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 2e8:	0e 94 c8 00 	call	0x190	; 0x190 <Receive_data>
 2ec:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 2f0:	0e 94 c8 00 	call	0x190	; 0x190 <Receive_data>
 2f4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 2f8:	0e 94 c8 00 	call	0x190	; 0x190 <Receive_data>
 2fc:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <CheckSum>
		
		if(display==0){
 300:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
 304:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <__data_end+0x1>
 308:	89 2b       	or	r24, r25
 30a:	09 f0       	breq	.+2      	; 0x30e <main+0xd2>
 30c:	76 c0       	rjmp	.+236    	; 0x3fa <main+0x1be>
			LCD_Clear();
 30e:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			LCD_String("H:");	
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 31a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <I_RH>
 31e:	4a e0       	ldi	r20, 0x0A	; 10
 320:	be 01       	movw	r22, r28
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__itoa_ncheck>
			itoa(I_RH,data,10);
			LCD_String(data);
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_String(".");
 334:	84 e1       	ldi	r24, 0x14	; 20
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 33c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <D_RH>
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	be 01       	movw	r22, r28
 344:	6f 5f       	subi	r22, 0xFF	; 255
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__itoa_ncheck>
			itoa(D_RH,data,10);
			LCD_String(data);
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_String("%    ");
 356:	86 e1       	ldi	r24, 0x16	; 22
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_String("S:");	
 35e:	8c e1       	ldi	r24, 0x1C	; 28
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 366:	c7 01       	movw	r24, r14
 368:	b6 01       	movw	r22, r12
 36a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fixsfsi>
 36e:	dc 01       	movw	r26, r24
 370:	cb 01       	movw	r24, r22
 372:	4a e0       	ldi	r20, 0x0A	; 10
 374:	be 01       	movw	r22, r28
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__itoa_ncheck>
			itoa(soil_sensor,data,10);
			LCD_String(data);
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_String("%");
 386:	8f e1       	ldi	r24, 0x1F	; 31
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_Command(0xC0);		
 38e:	80 ec       	ldi	r24, 0xC0	; 192
 390:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
			LCD_String("T:");	
 394:	81 e2       	ldi	r24, 0x21	; 33
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 39c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I_Temp>
 3a0:	4a e0       	ldi	r20, 0x0A	; 10
 3a2:	be 01       	movw	r22, r28
 3a4:	6f 5f       	subi	r22, 0xFF	; 255
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__itoa_ncheck>
			itoa(I_Temp,data,10);
			LCD_String(data);
 3ae:	ce 01       	movw	r24, r28
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_String(".");
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 3be:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <D_Temp>
 3c2:	4a e0       	ldi	r20, 0x0A	; 10
 3c4:	be 01       	movw	r22, r28
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__itoa_ncheck>
			itoa(D_Temp,data,10);
			LCD_String(data);
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_String("\xDF");
 3d8:	84 e2       	ldi	r24, 0x24	; 36
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 3e0:	4a e0       	ldi	r20, 0x0A	; 10
 3e2:	be 01       	movw	r22, r28
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	8f ed       	ldi	r24, 0xDF	; 223
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__itoa_ncheck>
			itoa(0xdf,data,10);
			LCD_String("C   ");
 3f0:	86 e2       	ldi	r24, 0x26	; 38
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
 3f8:	fa c0       	rjmp	.+500    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}else{
			LCD_Clear();
 3fa:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			if((I_Temp>4 && I_Temp<30)&&(soil_sensor >=10 && soil_sensor<=20)&&(I_RH<80)){
 3fe:	90 90 89 02 	lds	r9, 0x0289	; 0x800289 <I_Temp>
 402:	8b ef       	ldi	r24, 0xFB	; 251
 404:	89 0d       	add	r24, r9
 406:	89 31       	cpi	r24, 0x19	; 25
 408:	98 f5       	brcc	.+102    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e2       	ldi	r20, 0x20	; 32
 410:	51 e4       	ldi	r21, 0x41	; 65
 412:	c7 01       	movw	r24, r14
 414:	b6 01       	movw	r22, r12
 416:	0e 94 cd 04 	call	0x99a	; 0x99a <__gesf2>
 41a:	88 23       	and	r24, r24
 41c:	4c f1       	brlt	.+82     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 ea       	ldi	r20, 0xA0	; 160
 424:	51 e4       	ldi	r21, 0x41	; 65
 426:	c7 01       	movw	r24, r14
 428:	b6 01       	movw	r22, r12
 42a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__cmpsf2>
 42e:	18 16       	cp	r1, r24
 430:	fc f0       	brlt	.+62     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 432:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <I_RH>
 436:	80 35       	cpi	r24, 0x50	; 80
 438:	d8 f4       	brcc	.+54     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				LCD_String_Move("Very happy <3   ");
 43a:	8b e2       	ldi	r24, 0x2B	; 43
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
				if(emo==1){
 442:	01 30       	cpi	r16, 0x01	; 1
 444:	11 05       	cpc	r17, r1
 446:	51 f4       	brne	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 448:	80 ec       	ldi	r24, 0xC0	; 192
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 44e:	8c e3       	ldi	r24, 0x3C	; 60
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			LCD_Clear();
			if((I_Temp>4 && I_Temp<30)&&(soil_sensor >=10 && soil_sensor<=20)&&(I_RH<80)){
				LCD_String_Move("Very happy <3   ");
				if(emo==1){
					LCD_String_xy(1,0,"     ( >o< )    ");
					emo=0;
 456:	00 e0       	ldi	r16, 0x00	; 0
 458:	10 e0       	ldi	r17, 0x00	; 0
 45a:	c9 c0       	rjmp	.+402    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 462:	8d e4       	ldi	r24, 0x4D	; 77
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				if(emo==1){
					LCD_String_xy(1,0,"     ( >o< )    ");
					emo=0;
				}else{
					LCD_String_xy(1,0,"     ( >.< )    ");
					emo=1;
 46a:	0a 2d       	mov	r16, r10
 46c:	1b 2d       	mov	r17, r11
 46e:	bf c0       	rjmp	.+382    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				}
			}else if(soil_sensor > 30){
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	40 ef       	ldi	r20, 0xF0	; 240
 476:	51 e4       	ldi	r21, 0x41	; 65
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	0e 94 cd 04 	call	0x99a	; 0x99a <__gesf2>
 480:	18 16       	cp	r1, r24
 482:	dc f4       	brge	.+54     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				LCD_String_Move("Too much water!");
 484:	8e e5       	ldi	r24, 0x5E	; 94
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
				if(emo==1){
 48c:	01 30       	cpi	r16, 0x01	; 1
 48e:	11 05       	cpc	r17, r1
 490:	51 f4       	brne	.+20     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 492:	80 ec       	ldi	r24, 0xC0	; 192
 494:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 498:	8e e6       	ldi	r24, 0x6E	; 110
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				}
			}else if(soil_sensor > 30){
				LCD_String_Move("Too much water!");
				if(emo==1){
					LCD_String_xy(1,0,"     ( Y.Y')    ");
					emo=0;
 4a0:	00 e0       	ldi	r16, 0x00	; 0
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	a4 c0       	rjmp	.+328    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 4a6:	80 ec       	ldi	r24, 0xC0	; 192
 4a8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 4ac:	8f e7       	ldi	r24, 0x7F	; 127
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				if(emo==1){
					LCD_String_xy(1,0,"     ( Y.Y')    ");
					emo=0;
					}else{
					LCD_String_xy(1,0,"     ( YoY )    ");
					emo=1;
 4b4:	0a 2d       	mov	r16, r10
 4b6:	1b 2d       	mov	r17, r11
 4b8:	9a c0       	rjmp	.+308    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				}
			}else if(soil_sensor <10){
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	40 e2       	ldi	r20, 0x20	; 32
 4c0:	51 e4       	ldi	r21, 0x41	; 65
 4c2:	c7 01       	movw	r24, r14
 4c4:	b6 01       	movw	r22, r12
 4c6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__cmpsf2>
 4ca:	88 23       	and	r24, r24
 4cc:	dc f4       	brge	.+54     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			LCD_String_Move("Need more water!");
 4ce:	80 e9       	ldi	r24, 0x90	; 144
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
			if(emo==1){
 4d6:	01 30       	cpi	r16, 0x01	; 1
 4d8:	11 05       	cpc	r17, r1
 4da:	51 f4       	brne	.+20     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 4e2:	81 ea       	ldi	r24, 0xA1	; 161
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				}
			}else if(soil_sensor <10){
			LCD_String_Move("Need more water!");
			if(emo==1){
				LCD_String_xy(1,0,"     ( U.U')    ");
				emo=0;
 4ea:	00 e0       	ldi	r16, 0x00	; 0
 4ec:	10 e0       	ldi	r17, 0x00	; 0
 4ee:	7f c0       	rjmp	.+254    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 4f0:	80 ec       	ldi	r24, 0xC0	; 192
 4f2:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 4f6:	82 eb       	ldi	r24, 0xB2	; 178
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			if(emo==1){
				LCD_String_xy(1,0,"     ( U.U')    ");
				emo=0;
				}else{
				LCD_String_xy(1,0,"     ( U_U )!    ");
				emo=1;
 4fe:	0a 2d       	mov	r16, r10
 500:	1b 2d       	mov	r17, r11
 502:	75 c0       	rjmp	.+234    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				}
			}else if(I_Temp <4) {
 504:	23 e0       	ldi	r18, 0x03	; 3
 506:	29 15       	cp	r18, r9
 508:	d8 f0       	brcs	.+54     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				LCD_String_Move("Too cold..!     ");
 50a:	84 ec       	ldi	r24, 0xC4	; 196
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
				if(emo==1){
 512:	01 30       	cpi	r16, 0x01	; 1
 514:	11 05       	cpc	r17, r1
 516:	51 f4       	brne	.+20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 518:	80 ec       	ldi	r24, 0xC0	; 192
 51a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 51e:	8d e4       	ldi	r24, 0x4D	; 77
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				}
			}else if(I_Temp <4) {
				LCD_String_Move("Too cold..!     ");
				if(emo==1){
					LCD_String_xy(1,0,"     ( >.< )    ");
					emo=0;
 526:	00 e0       	ldi	r16, 0x00	; 0
 528:	10 e0       	ldi	r17, 0x00	; 0
 52a:	61 c0       	rjmp	.+194    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 532:	85 ed       	ldi	r24, 0xD5	; 213
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				if(emo==1){
					LCD_String_xy(1,0,"     ( >.< )    ");
					emo=0;
					}else{
					LCD_String_xy(1,0,"     ( O.O )    ");
					emo=1;
 53a:	0a 2d       	mov	r16, r10
 53c:	1b 2d       	mov	r17, r11
 53e:	57 c0       	rjmp	.+174    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				}		
			}else if(I_Temp >40) {
 540:	88 e2       	ldi	r24, 0x28	; 40
 542:	89 15       	cp	r24, r9
 544:	d8 f4       	brcc	.+54     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
			LCD_String_Move("Too hot..!      ");
 546:	86 ee       	ldi	r24, 0xE6	; 230
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
			if(emo==1){
 54e:	01 30       	cpi	r16, 0x01	; 1
 550:	11 05       	cpc	r17, r1
 552:	51 f4       	brne	.+20     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 554:	80 ec       	ldi	r24, 0xC0	; 192
 556:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 55a:	87 ef       	ldi	r24, 0xF7	; 247
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				}		
			}else if(I_Temp >40) {
			LCD_String_Move("Too hot..!      ");
			if(emo==1){
				LCD_String_xy(1,0,"     ( -w- )!!    ");
				emo=0;
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	43 c0       	rjmp	.+134    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 568:	80 ec       	ldi	r24, 0xC0	; 192
 56a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 56e:	8a e0       	ldi	r24, 0x0A	; 10
 570:	92 e0       	ldi	r25, 0x02	; 2
 572:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			if(emo==1){
				LCD_String_xy(1,0,"     ( -w- )!!    ");
				emo=0;
				}else{
				LCD_String_xy(1,0,"     ( -.- )!    ");
				emo=1;
 576:	0a 2d       	mov	r16, r10
 578:	1b 2d       	mov	r17, r11
 57a:	39 c0       	rjmp	.+114    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				}
			}else if(I_RH>80) {
 57c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <I_RH>
 580:	81 35       	cpi	r24, 0x51	; 81
 582:	d8 f0       	brcs	.+54     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
			LCD_String_Move("What happen..!  ");
 584:	8c e1       	ldi	r24, 0x1C	; 28
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
			if(emo==1){
 58c:	01 30       	cpi	r16, 0x01	; 1
 58e:	11 05       	cpc	r17, r1
 590:	51 f4       	brne	.+20     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 598:	8d e2       	ldi	r24, 0x2D	; 45
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
				}
			}else if(I_RH>80) {
			LCD_String_Move("What happen..!  ");
			if(emo==1){
				LCD_String_xy(1,0,"     ( O.o )?    ");
				emo=0;
 5a0:	00 e0       	ldi	r16, 0x00	; 0
 5a2:	10 e0       	ldi	r17, 0x00	; 0
 5a4:	24 c0       	rjmp	.+72     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 5a6:	80 ec       	ldi	r24, 0xC0	; 192
 5a8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 5ac:	8f e3       	ldi	r24, 0x3F	; 63
 5ae:	92 e0       	ldi	r25, 0x02	; 2
 5b0:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			if(emo==1){
				LCD_String_xy(1,0,"     ( O.o )?    ");
				emo=0;
				}else{
				LCD_String_xy(1,0,"     ( o.O )    ");
				emo=1;
 5b4:	0a 2d       	mov	r16, r10
 5b6:	1b 2d       	mov	r17, r11
 5b8:	1a c0       	rjmp	.+52     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
			}
		}else{
			LCD_String_Move("I'm fine :)     ");
 5ba:	80 e5       	ldi	r24, 0x50	; 80
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_String_Move>
			if(emo==1){
 5c2:	01 30       	cpi	r16, 0x01	; 1
 5c4:	11 05       	cpc	r17, r1
 5c6:	51 f4       	brne	.+20     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 5c8:	80 ec       	ldi	r24, 0xC0	; 192
 5ca:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 5ce:	81 e6       	ldi	r24, 0x61	; 97
 5d0:	92 e0       	ldi	r25, 0x02	; 2
 5d2:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			}
		}else{
			LCD_String_Move("I'm fine :)     ");
			if(emo==1){
				LCD_String_xy(1,0,"     ( ^_^ )    ");
				emo=0;
 5d6:	00 e0       	ldi	r16, 0x00	; 0
 5d8:	10 e0       	ldi	r17, 0x00	; 0
 5da:	09 c0       	rjmp	.+18     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 5dc:	80 ec       	ldi	r24, 0xC0	; 192
 5de:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 5e2:	82 e7       	ldi	r24, 0x72	; 114
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	0e 94 88 00 	call	0x110	; 0x110 <LCD_String>
			if(emo==1){
				LCD_String_xy(1,0,"     ( ^_^ )    ");
				emo=0;
				}else{
				LCD_String_xy(1,0,"     ( ^.^ )    ");
				emo=1;
 5ea:	0a 2d       	mov	r16, r10
 5ec:	1b 2d       	mov	r17, r11
 5ee:	9f e3       	ldi	r25, 0x3F	; 63
 5f0:	2d e0       	ldi	r18, 0x0D	; 13
 5f2:	83 e0       	ldi	r24, 0x03	; 3
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	20 40       	sbci	r18, 0x00	; 0
 5f8:	80 40       	sbci	r24, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5fe:	00 00       	nop
 600:	47 ce       	rjmp	.-882    	; 0x290 <main+0x54>

00000602 <__subsf3>:
 602:	50 58       	subi	r21, 0x80	; 128

00000604 <__addsf3>:
 604:	bb 27       	eor	r27, r27
 606:	aa 27       	eor	r26, r26
 608:	0e 94 19 03 	call	0x632	; 0x632 <__addsf3x>
 60c:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 610:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 614:	38 f0       	brcs	.+14     	; 0x624 <__addsf3+0x20>
 616:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 61a:	20 f0       	brcs	.+8      	; 0x624 <__addsf3+0x20>
 61c:	39 f4       	brne	.+14     	; 0x62c <__addsf3+0x28>
 61e:	9f 3f       	cpi	r25, 0xFF	; 255
 620:	19 f4       	brne	.+6      	; 0x628 <__addsf3+0x24>
 622:	26 f4       	brtc	.+8      	; 0x62c <__addsf3+0x28>
 624:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 628:	0e f4       	brtc	.+2      	; 0x62c <__addsf3+0x28>
 62a:	e0 95       	com	r30
 62c:	e7 fb       	bst	r30, 7
 62e:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>

00000632 <__addsf3x>:
 632:	e9 2f       	mov	r30, r25
 634:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 638:	58 f3       	brcs	.-42     	; 0x610 <__addsf3+0xc>
 63a:	ba 17       	cp	r27, r26
 63c:	62 07       	cpc	r22, r18
 63e:	73 07       	cpc	r23, r19
 640:	84 07       	cpc	r24, r20
 642:	95 07       	cpc	r25, r21
 644:	20 f0       	brcs	.+8      	; 0x64e <__addsf3x+0x1c>
 646:	79 f4       	brne	.+30     	; 0x666 <__addsf3x+0x34>
 648:	a6 f5       	brtc	.+104    	; 0x6b2 <__addsf3x+0x80>
 64a:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_zero>
 64e:	0e f4       	brtc	.+2      	; 0x652 <__addsf3x+0x20>
 650:	e0 95       	com	r30
 652:	0b 2e       	mov	r0, r27
 654:	ba 2f       	mov	r27, r26
 656:	a0 2d       	mov	r26, r0
 658:	0b 01       	movw	r0, r22
 65a:	b9 01       	movw	r22, r18
 65c:	90 01       	movw	r18, r0
 65e:	0c 01       	movw	r0, r24
 660:	ca 01       	movw	r24, r20
 662:	a0 01       	movw	r20, r0
 664:	11 24       	eor	r1, r1
 666:	ff 27       	eor	r31, r31
 668:	59 1b       	sub	r21, r25
 66a:	99 f0       	breq	.+38     	; 0x692 <__addsf3x+0x60>
 66c:	59 3f       	cpi	r21, 0xF9	; 249
 66e:	50 f4       	brcc	.+20     	; 0x684 <__addsf3x+0x52>
 670:	50 3e       	cpi	r21, 0xE0	; 224
 672:	68 f1       	brcs	.+90     	; 0x6ce <__addsf3x+0x9c>
 674:	1a 16       	cp	r1, r26
 676:	f0 40       	sbci	r31, 0x00	; 0
 678:	a2 2f       	mov	r26, r18
 67a:	23 2f       	mov	r18, r19
 67c:	34 2f       	mov	r19, r20
 67e:	44 27       	eor	r20, r20
 680:	58 5f       	subi	r21, 0xF8	; 248
 682:	f3 cf       	rjmp	.-26     	; 0x66a <__addsf3x+0x38>
 684:	46 95       	lsr	r20
 686:	37 95       	ror	r19
 688:	27 95       	ror	r18
 68a:	a7 95       	ror	r26
 68c:	f0 40       	sbci	r31, 0x00	; 0
 68e:	53 95       	inc	r21
 690:	c9 f7       	brne	.-14     	; 0x684 <__addsf3x+0x52>
 692:	7e f4       	brtc	.+30     	; 0x6b2 <__addsf3x+0x80>
 694:	1f 16       	cp	r1, r31
 696:	ba 0b       	sbc	r27, r26
 698:	62 0b       	sbc	r22, r18
 69a:	73 0b       	sbc	r23, r19
 69c:	84 0b       	sbc	r24, r20
 69e:	ba f0       	brmi	.+46     	; 0x6ce <__addsf3x+0x9c>
 6a0:	91 50       	subi	r25, 0x01	; 1
 6a2:	a1 f0       	breq	.+40     	; 0x6cc <__addsf3x+0x9a>
 6a4:	ff 0f       	add	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	c2 f7       	brpl	.-16     	; 0x6a0 <__addsf3x+0x6e>
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <__addsf3x+0x9c>
 6b2:	ba 0f       	add	r27, r26
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 1f       	adc	r23, r19
 6b8:	84 1f       	adc	r24, r20
 6ba:	48 f4       	brcc	.+18     	; 0x6ce <__addsf3x+0x9c>
 6bc:	87 95       	ror	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	9e 3f       	cpi	r25, 0xFE	; 254
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <__addsf3x+0x9a>
 6ca:	b0 cf       	rjmp	.-160    	; 0x62c <__addsf3+0x28>
 6cc:	93 95       	inc	r25
 6ce:	88 0f       	add	r24, r24
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <__addsf3x+0xa2>
 6d2:	99 27       	eor	r25, r25
 6d4:	ee 0f       	add	r30, r30
 6d6:	97 95       	ror	r25
 6d8:	87 95       	ror	r24
 6da:	08 95       	ret

000006dc <__cmpsf2>:
 6dc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_cmp>
 6e0:	08 f4       	brcc	.+2      	; 0x6e4 <__cmpsf2+0x8>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	08 95       	ret

000006e6 <__divsf3>:
 6e6:	0e 94 87 03 	call	0x70e	; 0x70e <__divsf3x>
 6ea:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 6ee:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 6f2:	58 f0       	brcs	.+22     	; 0x70a <__divsf3+0x24>
 6f4:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 6f8:	40 f0       	brcs	.+16     	; 0x70a <__divsf3+0x24>
 6fa:	29 f4       	brne	.+10     	; 0x706 <__divsf3+0x20>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	29 f0       	breq	.+10     	; 0x70a <__divsf3+0x24>
 700:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 704:	51 11       	cpse	r21, r1
 706:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 70a:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>

0000070e <__divsf3x>:
 70e:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 712:	68 f3       	brcs	.-38     	; 0x6ee <__divsf3+0x8>

00000714 <__divsf3_pse>:
 714:	99 23       	and	r25, r25
 716:	b1 f3       	breq	.-20     	; 0x704 <__divsf3+0x1e>
 718:	55 23       	and	r21, r21
 71a:	91 f3       	breq	.-28     	; 0x700 <__divsf3+0x1a>
 71c:	95 1b       	sub	r25, r21
 71e:	55 0b       	sbc	r21, r21
 720:	bb 27       	eor	r27, r27
 722:	aa 27       	eor	r26, r26
 724:	62 17       	cp	r22, r18
 726:	73 07       	cpc	r23, r19
 728:	84 07       	cpc	r24, r20
 72a:	38 f0       	brcs	.+14     	; 0x73a <__divsf3_pse+0x26>
 72c:	9f 5f       	subi	r25, 0xFF	; 255
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
 730:	22 0f       	add	r18, r18
 732:	33 1f       	adc	r19, r19
 734:	44 1f       	adc	r20, r20
 736:	aa 1f       	adc	r26, r26
 738:	a9 f3       	breq	.-22     	; 0x724 <__divsf3_pse+0x10>
 73a:	35 d0       	rcall	.+106    	; 0x7a6 <__divsf3_pse+0x92>
 73c:	0e 2e       	mov	r0, r30
 73e:	3a f0       	brmi	.+14     	; 0x74e <__divsf3_pse+0x3a>
 740:	e0 e8       	ldi	r30, 0x80	; 128
 742:	32 d0       	rcall	.+100    	; 0x7a8 <__divsf3_pse+0x94>
 744:	91 50       	subi	r25, 0x01	; 1
 746:	50 40       	sbci	r21, 0x00	; 0
 748:	e6 95       	lsr	r30
 74a:	00 1c       	adc	r0, r0
 74c:	ca f7       	brpl	.-14     	; 0x740 <__divsf3_pse+0x2c>
 74e:	2b d0       	rcall	.+86     	; 0x7a6 <__divsf3_pse+0x92>
 750:	fe 2f       	mov	r31, r30
 752:	29 d0       	rcall	.+82     	; 0x7a6 <__divsf3_pse+0x92>
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	bb 1f       	adc	r27, r27
 75c:	26 17       	cp	r18, r22
 75e:	37 07       	cpc	r19, r23
 760:	48 07       	cpc	r20, r24
 762:	ab 07       	cpc	r26, r27
 764:	b0 e8       	ldi	r27, 0x80	; 128
 766:	09 f0       	breq	.+2      	; 0x76a <__divsf3_pse+0x56>
 768:	bb 0b       	sbc	r27, r27
 76a:	80 2d       	mov	r24, r0
 76c:	bf 01       	movw	r22, r30
 76e:	ff 27       	eor	r31, r31
 770:	93 58       	subi	r25, 0x83	; 131
 772:	5f 4f       	sbci	r21, 0xFF	; 255
 774:	3a f0       	brmi	.+14     	; 0x784 <__divsf3_pse+0x70>
 776:	9e 3f       	cpi	r25, 0xFE	; 254
 778:	51 05       	cpc	r21, r1
 77a:	78 f0       	brcs	.+30     	; 0x79a <__divsf3_pse+0x86>
 77c:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 780:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	e4 f3       	brlt	.-8      	; 0x780 <__divsf3_pse+0x6c>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	d4 f3       	brlt	.-12     	; 0x780 <__divsf3_pse+0x6c>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c9 f7       	brne	.-14     	; 0x78c <__divsf3_pse+0x78>
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret
 7a6:	e1 e0       	ldi	r30, 0x01	; 1
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	62 17       	cp	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	ba 07       	cpc	r27, r26
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__divsf3_pse+0xae>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	ee 1f       	adc	r30, r30
 7c4:	88 f7       	brcc	.-30     	; 0x7a8 <__divsf3_pse+0x94>
 7c6:	e0 95       	com	r30
 7c8:	08 95       	ret

000007ca <__fixsfsi>:
 7ca:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fixunssfsi>
 7ce:	68 94       	set
 7d0:	b1 11       	cpse	r27, r1
 7d2:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 7d6:	08 95       	ret

000007d8 <__fixunssfsi>:
 7d8:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_splitA>
 7dc:	88 f0       	brcs	.+34     	; 0x800 <__fixunssfsi+0x28>
 7de:	9f 57       	subi	r25, 0x7F	; 127
 7e0:	98 f0       	brcs	.+38     	; 0x808 <__fixunssfsi+0x30>
 7e2:	b9 2f       	mov	r27, r25
 7e4:	99 27       	eor	r25, r25
 7e6:	b7 51       	subi	r27, 0x17	; 23
 7e8:	b0 f0       	brcs	.+44     	; 0x816 <__fixunssfsi+0x3e>
 7ea:	e1 f0       	breq	.+56     	; 0x824 <__fixunssfsi+0x4c>
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	88 1f       	adc	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	1a f0       	brmi	.+6      	; 0x7fc <__fixunssfsi+0x24>
 7f6:	ba 95       	dec	r27
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__fixunssfsi+0x14>
 7fa:	14 c0       	rjmp	.+40     	; 0x824 <__fixunssfsi+0x4c>
 7fc:	b1 30       	cpi	r27, 0x01	; 1
 7fe:	91 f0       	breq	.+36     	; 0x824 <__fixunssfsi+0x4c>
 800:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_zero>
 804:	b1 e0       	ldi	r27, 0x01	; 1
 806:	08 95       	ret
 808:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_zero>
 80c:	67 2f       	mov	r22, r23
 80e:	78 2f       	mov	r23, r24
 810:	88 27       	eor	r24, r24
 812:	b8 5f       	subi	r27, 0xF8	; 248
 814:	39 f0       	breq	.+14     	; 0x824 <__fixunssfsi+0x4c>
 816:	b9 3f       	cpi	r27, 0xF9	; 249
 818:	cc f3       	brlt	.-14     	; 0x80c <__fixunssfsi+0x34>
 81a:	86 95       	lsr	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	b3 95       	inc	r27
 822:	d9 f7       	brne	.-10     	; 0x81a <__fixunssfsi+0x42>
 824:	3e f4       	brtc	.+14     	; 0x834 <__fixunssfsi+0x5c>
 826:	90 95       	com	r25
 828:	80 95       	com	r24
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__floatunsisf>:
 836:	e8 94       	clt
 838:	09 c0       	rjmp	.+18     	; 0x84c <__floatsisf+0x12>

0000083a <__floatsisf>:
 83a:	97 fb       	bst	r25, 7
 83c:	3e f4       	brtc	.+14     	; 0x84c <__floatsisf+0x12>
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	99 23       	and	r25, r25
 84e:	a9 f0       	breq	.+42     	; 0x87a <__floatsisf+0x40>
 850:	f9 2f       	mov	r31, r25
 852:	96 e9       	ldi	r25, 0x96	; 150
 854:	bb 27       	eor	r27, r27
 856:	93 95       	inc	r25
 858:	f6 95       	lsr	r31
 85a:	87 95       	ror	r24
 85c:	77 95       	ror	r23
 85e:	67 95       	ror	r22
 860:	b7 95       	ror	r27
 862:	f1 11       	cpse	r31, r1
 864:	f8 cf       	rjmp	.-16     	; 0x856 <__floatsisf+0x1c>
 866:	fa f4       	brpl	.+62     	; 0x8a6 <__floatsisf+0x6c>
 868:	bb 0f       	add	r27, r27
 86a:	11 f4       	brne	.+4      	; 0x870 <__floatsisf+0x36>
 86c:	60 ff       	sbrs	r22, 0
 86e:	1b c0       	rjmp	.+54     	; 0x8a6 <__floatsisf+0x6c>
 870:	6f 5f       	subi	r22, 0xFF	; 255
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <__floatsisf+0x6c>
 87a:	88 23       	and	r24, r24
 87c:	11 f0       	breq	.+4      	; 0x882 <__floatsisf+0x48>
 87e:	96 e9       	ldi	r25, 0x96	; 150
 880:	11 c0       	rjmp	.+34     	; 0x8a4 <__floatsisf+0x6a>
 882:	77 23       	and	r23, r23
 884:	21 f0       	breq	.+8      	; 0x88e <__floatsisf+0x54>
 886:	9e e8       	ldi	r25, 0x8E	; 142
 888:	87 2f       	mov	r24, r23
 88a:	76 2f       	mov	r23, r22
 88c:	05 c0       	rjmp	.+10     	; 0x898 <__floatsisf+0x5e>
 88e:	66 23       	and	r22, r22
 890:	71 f0       	breq	.+28     	; 0x8ae <__floatsisf+0x74>
 892:	96 e8       	ldi	r25, 0x86	; 134
 894:	86 2f       	mov	r24, r22
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	2a f0       	brmi	.+10     	; 0x8a6 <__floatsisf+0x6c>
 89c:	9a 95       	dec	r25
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	da f7       	brpl	.-10     	; 0x89c <__floatsisf+0x62>
 8a6:	88 0f       	add	r24, r24
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__fp_cmp>:
 8b0:	99 0f       	add	r25, r25
 8b2:	00 08       	sbc	r0, r0
 8b4:	55 0f       	add	r21, r21
 8b6:	aa 0b       	sbc	r26, r26
 8b8:	e0 e8       	ldi	r30, 0x80	; 128
 8ba:	fe ef       	ldi	r31, 0xFE	; 254
 8bc:	16 16       	cp	r1, r22
 8be:	17 06       	cpc	r1, r23
 8c0:	e8 07       	cpc	r30, r24
 8c2:	f9 07       	cpc	r31, r25
 8c4:	c0 f0       	brcs	.+48     	; 0x8f6 <__fp_cmp+0x46>
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	e4 07       	cpc	r30, r20
 8cc:	f5 07       	cpc	r31, r21
 8ce:	98 f0       	brcs	.+38     	; 0x8f6 <__fp_cmp+0x46>
 8d0:	62 1b       	sub	r22, r18
 8d2:	73 0b       	sbc	r23, r19
 8d4:	84 0b       	sbc	r24, r20
 8d6:	95 0b       	sbc	r25, r21
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <__fp_cmp+0x38>
 8da:	0a 26       	eor	r0, r26
 8dc:	61 f0       	breq	.+24     	; 0x8f6 <__fp_cmp+0x46>
 8de:	23 2b       	or	r18, r19
 8e0:	24 2b       	or	r18, r20
 8e2:	25 2b       	or	r18, r21
 8e4:	21 f4       	brne	.+8      	; 0x8ee <__fp_cmp+0x3e>
 8e6:	08 95       	ret
 8e8:	0a 26       	eor	r0, r26
 8ea:	09 f4       	brne	.+2      	; 0x8ee <__fp_cmp+0x3e>
 8ec:	a1 40       	sbci	r26, 0x01	; 1
 8ee:	a6 95       	lsr	r26
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	81 1d       	adc	r24, r1
 8f4:	81 1d       	adc	r24, r1
 8f6:	08 95       	ret

000008f8 <__fp_inf>:
 8f8:	97 f9       	bld	r25, 7
 8fa:	9f 67       	ori	r25, 0x7F	; 127
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	08 95       	ret

00000904 <__fp_nan>:
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	80 ec       	ldi	r24, 0xC0	; 192
 908:	08 95       	ret

0000090a <__fp_pscA>:
 90a:	00 24       	eor	r0, r0
 90c:	0a 94       	dec	r0
 90e:	16 16       	cp	r1, r22
 910:	17 06       	cpc	r1, r23
 912:	18 06       	cpc	r1, r24
 914:	09 06       	cpc	r0, r25
 916:	08 95       	ret

00000918 <__fp_pscB>:
 918:	00 24       	eor	r0, r0
 91a:	0a 94       	dec	r0
 91c:	12 16       	cp	r1, r18
 91e:	13 06       	cpc	r1, r19
 920:	14 06       	cpc	r1, r20
 922:	05 06       	cpc	r0, r21
 924:	08 95       	ret

00000926 <__fp_round>:
 926:	09 2e       	mov	r0, r25
 928:	03 94       	inc	r0
 92a:	00 0c       	add	r0, r0
 92c:	11 f4       	brne	.+4      	; 0x932 <__fp_round+0xc>
 92e:	88 23       	and	r24, r24
 930:	52 f0       	brmi	.+20     	; 0x946 <__fp_round+0x20>
 932:	bb 0f       	add	r27, r27
 934:	40 f4       	brcc	.+16     	; 0x946 <__fp_round+0x20>
 936:	bf 2b       	or	r27, r31
 938:	11 f4       	brne	.+4      	; 0x93e <__fp_round+0x18>
 93a:	60 ff       	sbrs	r22, 0
 93c:	04 c0       	rjmp	.+8      	; 0x946 <__fp_round+0x20>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__fp_split3>:
 948:	57 fd       	sbrc	r21, 7
 94a:	90 58       	subi	r25, 0x80	; 128
 94c:	44 0f       	add	r20, r20
 94e:	55 1f       	adc	r21, r21
 950:	59 f0       	breq	.+22     	; 0x968 <__fp_splitA+0x10>
 952:	5f 3f       	cpi	r21, 0xFF	; 255
 954:	71 f0       	breq	.+28     	; 0x972 <__fp_splitA+0x1a>
 956:	47 95       	ror	r20

00000958 <__fp_splitA>:
 958:	88 0f       	add	r24, r24
 95a:	97 fb       	bst	r25, 7
 95c:	99 1f       	adc	r25, r25
 95e:	61 f0       	breq	.+24     	; 0x978 <__fp_splitA+0x20>
 960:	9f 3f       	cpi	r25, 0xFF	; 255
 962:	79 f0       	breq	.+30     	; 0x982 <__fp_splitA+0x2a>
 964:	87 95       	ror	r24
 966:	08 95       	ret
 968:	12 16       	cp	r1, r18
 96a:	13 06       	cpc	r1, r19
 96c:	14 06       	cpc	r1, r20
 96e:	55 1f       	adc	r21, r21
 970:	f2 cf       	rjmp	.-28     	; 0x956 <__fp_split3+0xe>
 972:	46 95       	lsr	r20
 974:	f1 df       	rcall	.-30     	; 0x958 <__fp_splitA>
 976:	08 c0       	rjmp	.+16     	; 0x988 <__fp_splitA+0x30>
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	18 06       	cpc	r1, r24
 97e:	99 1f       	adc	r25, r25
 980:	f1 cf       	rjmp	.-30     	; 0x964 <__fp_splitA+0xc>
 982:	86 95       	lsr	r24
 984:	71 05       	cpc	r23, r1
 986:	61 05       	cpc	r22, r1
 988:	08 94       	sec
 98a:	08 95       	ret

0000098c <__fp_zero>:
 98c:	e8 94       	clt

0000098e <__fp_szero>:
 98e:	bb 27       	eor	r27, r27
 990:	66 27       	eor	r22, r22
 992:	77 27       	eor	r23, r23
 994:	cb 01       	movw	r24, r22
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__gesf2>:
 99a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_cmp>
 99e:	08 f4       	brcc	.+2      	; 0x9a2 <__gesf2+0x8>
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	08 95       	ret

000009a4 <__mulsf3>:
 9a4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsf3x>
 9a8:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 9ac:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 9b0:	38 f0       	brcs	.+14     	; 0x9c0 <__mulsf3+0x1c>
 9b2:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 9b6:	20 f0       	brcs	.+8      	; 0x9c0 <__mulsf3+0x1c>
 9b8:	95 23       	and	r25, r21
 9ba:	11 f0       	breq	.+4      	; 0x9c0 <__mulsf3+0x1c>
 9bc:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 9c0:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 9c4:	11 24       	eor	r1, r1
 9c6:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>

000009ca <__mulsf3x>:
 9ca:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 9ce:	70 f3       	brcs	.-36     	; 0x9ac <__mulsf3+0x8>

000009d0 <__mulsf3_pse>:
 9d0:	95 9f       	mul	r25, r21
 9d2:	c1 f3       	breq	.-16     	; 0x9c4 <__mulsf3+0x20>
 9d4:	95 0f       	add	r25, r21
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	55 1f       	adc	r21, r21
 9da:	62 9f       	mul	r22, r18
 9dc:	f0 01       	movw	r30, r0
 9de:	72 9f       	mul	r23, r18
 9e0:	bb 27       	eor	r27, r27
 9e2:	f0 0d       	add	r31, r0
 9e4:	b1 1d       	adc	r27, r1
 9e6:	63 9f       	mul	r22, r19
 9e8:	aa 27       	eor	r26, r26
 9ea:	f0 0d       	add	r31, r0
 9ec:	b1 1d       	adc	r27, r1
 9ee:	aa 1f       	adc	r26, r26
 9f0:	64 9f       	mul	r22, r20
 9f2:	66 27       	eor	r22, r22
 9f4:	b0 0d       	add	r27, r0
 9f6:	a1 1d       	adc	r26, r1
 9f8:	66 1f       	adc	r22, r22
 9fa:	82 9f       	mul	r24, r18
 9fc:	22 27       	eor	r18, r18
 9fe:	b0 0d       	add	r27, r0
 a00:	a1 1d       	adc	r26, r1
 a02:	62 1f       	adc	r22, r18
 a04:	73 9f       	mul	r23, r19
 a06:	b0 0d       	add	r27, r0
 a08:	a1 1d       	adc	r26, r1
 a0a:	62 1f       	adc	r22, r18
 a0c:	83 9f       	mul	r24, r19
 a0e:	a0 0d       	add	r26, r0
 a10:	61 1d       	adc	r22, r1
 a12:	22 1f       	adc	r18, r18
 a14:	74 9f       	mul	r23, r20
 a16:	33 27       	eor	r19, r19
 a18:	a0 0d       	add	r26, r0
 a1a:	61 1d       	adc	r22, r1
 a1c:	23 1f       	adc	r18, r19
 a1e:	84 9f       	mul	r24, r20
 a20:	60 0d       	add	r22, r0
 a22:	21 1d       	adc	r18, r1
 a24:	82 2f       	mov	r24, r18
 a26:	76 2f       	mov	r23, r22
 a28:	6a 2f       	mov	r22, r26
 a2a:	11 24       	eor	r1, r1
 a2c:	9f 57       	subi	r25, 0x7F	; 127
 a2e:	50 40       	sbci	r21, 0x00	; 0
 a30:	9a f0       	brmi	.+38     	; 0xa58 <__mulsf3_pse+0x88>
 a32:	f1 f0       	breq	.+60     	; 0xa70 <__mulsf3_pse+0xa0>
 a34:	88 23       	and	r24, r24
 a36:	4a f0       	brmi	.+18     	; 0xa4a <__mulsf3_pse+0x7a>
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	bb 1f       	adc	r27, r27
 a3e:	66 1f       	adc	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	91 50       	subi	r25, 0x01	; 1
 a46:	50 40       	sbci	r21, 0x00	; 0
 a48:	a9 f7       	brne	.-22     	; 0xa34 <__mulsf3_pse+0x64>
 a4a:	9e 3f       	cpi	r25, 0xFE	; 254
 a4c:	51 05       	cpc	r21, r1
 a4e:	80 f0       	brcs	.+32     	; 0xa70 <__mulsf3_pse+0xa0>
 a50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 a54:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	e4 f3       	brlt	.-8      	; 0xa54 <__mulsf3_pse+0x84>
 a5c:	98 3e       	cpi	r25, 0xE8	; 232
 a5e:	d4 f3       	brlt	.-12     	; 0xa54 <__mulsf3_pse+0x84>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b7 95       	ror	r27
 a68:	f7 95       	ror	r31
 a6a:	e7 95       	ror	r30
 a6c:	9f 5f       	subi	r25, 0xFF	; 255
 a6e:	c1 f7       	brne	.-16     	; 0xa60 <__mulsf3_pse+0x90>
 a70:	fe 2b       	or	r31, r30
 a72:	88 0f       	add	r24, r24
 a74:	91 1d       	adc	r25, r1
 a76:	96 95       	lsr	r25
 a78:	87 95       	ror	r24
 a7a:	97 f9       	bld	r25, 7
 a7c:	08 95       	ret

00000a7e <__itoa_ncheck>:
 a7e:	bb 27       	eor	r27, r27
 a80:	4a 30       	cpi	r20, 0x0A	; 10
 a82:	31 f4       	brne	.+12     	; 0xa90 <__itoa_ncheck+0x12>
 a84:	99 23       	and	r25, r25
 a86:	22 f4       	brpl	.+8      	; 0xa90 <__itoa_ncheck+0x12>
 a88:	bd e2       	ldi	r27, 0x2D	; 45
 a8a:	90 95       	com	r25
 a8c:	81 95       	neg	r24
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__utoa_common>

00000a94 <__utoa_ncheck>:
 a94:	bb 27       	eor	r27, r27

00000a96 <__utoa_common>:
 a96:	fb 01       	movw	r30, r22
 a98:	55 27       	eor	r21, r21
 a9a:	aa 27       	eor	r26, r26
 a9c:	88 0f       	add	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	aa 1f       	adc	r26, r26
 aa2:	a4 17       	cp	r26, r20
 aa4:	10 f0       	brcs	.+4      	; 0xaaa <__utoa_common+0x14>
 aa6:	a4 1b       	sub	r26, r20
 aa8:	83 95       	inc	r24
 aaa:	50 51       	subi	r21, 0x10	; 16
 aac:	b9 f7       	brne	.-18     	; 0xa9c <__utoa_common+0x6>
 aae:	a0 5d       	subi	r26, 0xD0	; 208
 ab0:	aa 33       	cpi	r26, 0x3A	; 58
 ab2:	08 f0       	brcs	.+2      	; 0xab6 <__utoa_common+0x20>
 ab4:	a9 5d       	subi	r26, 0xD9	; 217
 ab6:	a1 93       	st	Z+, r26
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	79 f7       	brne	.-34     	; 0xa9a <__utoa_common+0x4>
 abc:	b1 11       	cpse	r27, r1
 abe:	b1 93       	st	Z+, r27
 ac0:	11 92       	st	Z+, r1
 ac2:	cb 01       	movw	r24, r22
 ac4:	0c 94 64 05 	jmp	0xac8	; 0xac8 <strrev>

00000ac8 <strrev>:
 ac8:	dc 01       	movw	r26, r24
 aca:	fc 01       	movw	r30, r24
 acc:	67 2f       	mov	r22, r23
 ace:	71 91       	ld	r23, Z+
 ad0:	77 23       	and	r23, r23
 ad2:	e1 f7       	brne	.-8      	; 0xacc <strrev+0x4>
 ad4:	32 97       	sbiw	r30, 0x02	; 2
 ad6:	04 c0       	rjmp	.+8      	; 0xae0 <strrev+0x18>
 ad8:	7c 91       	ld	r23, X
 ada:	6d 93       	st	X+, r22
 adc:	70 83       	st	Z, r23
 ade:	62 91       	ld	r22, -Z
 ae0:	ae 17       	cp	r26, r30
 ae2:	bf 07       	cpc	r27, r31
 ae4:	c8 f3       	brcs	.-14     	; 0xad8 <strrev+0x10>
 ae6:	08 95       	ret

00000ae8 <_exit>:
 ae8:	f8 94       	cli

00000aea <__stop_program>:
 aea:	ff cf       	rjmp	.-2      	; 0xaea <__stop_program>
